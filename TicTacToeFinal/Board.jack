class Board {
  field Array squares;
  static Array locationsx;
  static Array locationsy;

  
  constructor Board new(){
    // Initialize a new game board
    let locationsx = Array.new(9);
    let locationsy = Array.new(9);
    
    let locationsx[0] = 192;
    let locationsx[1] = 256;
    let locationsx[2] = 320;
    let locationsx[3] = 192;
    let locationsx[4] = 256;
    let locationsx[5] = 320;
    let locationsx[6] = 192;
    let locationsx[7] = 256;
    let locationsx[8] = 320;

    let locationsy[0] = 64;
    let locationsy[1] = 64;
    let locationsy[2] = 64;
    let locationsy[3] = 128;
    let locationsy[4] = 128;
    let locationsy[5] = 128;
    let locationsy[6] = 192;
    let locationsy[7] = 192;
    let locationsy[8] = 192;

    let squares = Array.new(9);
    
    do drawGrid();
    return this;
  }
 method void drawGrid()
{
    // Draw the gameboard.
    // left vertical
    do Screen.drawLine(224, 32, 224, 224);
    // right vertical
    do Screen.drawLine(288, 32, 288, 224);
    // top horizontal
    do Screen.drawLine(160, 96, 352, 96);
    // bottom horizontal
    do Screen.drawLine(160, 160, 352, 160);
    return;
  }
  method int chooseMove(boolean x)
{    var Drawing draw;
    // Interactively select a square to place an X (if x = true) or an O (x = false)
    var int selection;
    var int key;
    let selection = 4;
    do drawReticle(selection);
    
    while(true){
      let key = Keyboard.keyPressed();
      if(key = 132)// Right arrow
     { 
        do draw.eraseReticle(selection);
        let selection = draw.sanitizeLocation(selection + 1);
        do drawReticle(selection);
      }
      if(key = 130) // Left arrow
       { do draw.eraseReticle(selection);
        let selection = draw.sanitizeLocation(selection - 1);
        do drawReticle(selection);
      }
      if(key = 131) // Up arrow
       { do draw.eraseReticle(selection);
        let selection = draw.sanitizeLocation(selection - 3);
        do drawReticle(selection);
      }
      if(key = 133)// Down arrow
       { do draw.eraseReticle(selection);
        let selection = draw.sanitizeLocation(selection + 3);
        do drawReticle(selection);
      }
      if(key = 128)// Return key
       { do draw.eraseReticle(selection);
        if(validSelection(selection))
       {
          do move(selection, x);
          return selection;
        }
       else{
          do drawReticle(selection);
             }
      }
    }
    return 4;
  }

  method boolean validSelection(int location)
 {// Check to see if the selection passed is a valid move, i.e., not a square that is already marked.
    if(~(squares[location] = -1) & ~(squares[location] = 1))
   {
      return true;
    }
   else{
          return false;
         }
  }

  method void move(int location, boolean x)
  {
    // Place an X (if x = true) or an O (x = false) at location.
  
     if(x){
      let squares[location] = 1;
    }
    else{
      let squares[location] = -1;
    }
   // do Output.printInt(squares[location]);
    //do Output.println();
    do drawMove(location, x);
    return;
  }
method void drawReticle(int location)
{
    // Draw a selection reticle over the given location on the board. Intentionally does not set the draw color (white or black) so that it can also be used to erase a reticle if called by eraseReticle.
var Drawing d;   
 var int left, right, top, bottom;
    var int x, y;
    let location = d.sanitizeLocation(location);
    let x = locationsx[location];
    let y = locationsy[location];

    let left = x - 22;
    let right = x + 22;
    let top = y + 22;
    let bottom = y - 22;
    
    do Screen.drawLine(left, top, left, bottom);
    do Screen.drawLine(left, top, right, top);
    do Screen.drawLine(right, top, right, bottom);
    do Screen.drawLine(right, bottom, left, bottom);

    return; 
  }

  method void drawMove(int location, boolean x)
{    var Drawing d;
    // Given a location, draws an X there if x = true, otherwise draws an O.
    var int xcenter;
    var int ycenter;
    let location = d.sanitizeLocation(location);
    let xcenter = locationsx[location];
    let ycenter = locationsy[location];
    
    if(x){
      do d.drawO(xcenter, ycenter);
    }else{
      do d.drawX(xcenter, ycenter);
    }
    return;
  }
method boolean winner(){
 var Result res;
  // Checks the whole board using victoryOn to see if there is a winner.
  
    if((res.victoryOn(squares[0], squares[1], squares[2])) |
        (res.victoryOn(squares[3], squares[4], squares[5])) |
        (res.victoryOn(squares[6], squares[7], squares[8])) |
        (res.victoryOn(squares[0], squares[3], squares[6])) |
        (res.victoryOn(squares[1], squares[4], squares[7])) |
        (res.victoryOn(squares[2], squares[5], squares[8])) |
        (res.victoryOn(squares[0], squares[4], squares[8])) |
        (res.victoryOn(squares[2], squares[4], squares[6])))
    {
      return true;
    }
    return false;
  }

 
}